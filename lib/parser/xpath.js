module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AbbreviatedAxisSpecifier": parse_AbbreviatedAxisSpecifier,
        "AbbreviatedStep": parse_AbbreviatedStep,
        "AbsoluteLocationPath": parse_AbsoluteLocationPath,
        "AdditiveExpr": parse_AdditiveExpr,
        "AndExpr": parse_AndExpr,
        "AxisName": parse_AxisName,
        "AxisSpecifier": parse_AxisSpecifier,
        "BooleanFunctions": parse_BooleanFunctions,
        "Digits": parse_Digits,
        "EqualityExpr": parse_EqualityExpr,
        "ExprToken": parse_ExprToken,
        "ExprWhitespace": parse_ExprWhitespace,
        "FilterExpr": parse_FilterExpr,
        "FunctionCall": parse_FunctionCall,
        "FunctionName": parse_FunctionName,
        "Literal": parse_Literal,
        "LocationPath": parse_LocationPath,
        "MultiplicativeExpr": parse_MultiplicativeExpr,
        "MultiplyOperator": parse_MultiplyOperator,
        "Name": parse_Name,
        "NameChar": parse_NameChar,
        "NameStartChar": parse_NameStartChar,
        "NameTest": parse_NameTest,
        "NodeSetFunctions": parse_NodeSetFunctions,
        "NodeTest": parse_NodeTest,
        "NodeType": parse_NodeType,
        "Number": parse_Number,
        "NumberFunctions": parse_NumberFunctions,
        "Operator": parse_Operator,
        "OperatorName": parse_OperatorName,
        "OrExpr": parse_OrExpr,
        "PathExpr": parse_PathExpr,
        "Predicate": parse_Predicate,
        "PrimaryExpr": parse_PrimaryExpr,
        "RelationalExpr": parse_RelationalExpr,
        "RelativeLocationPath": parse_RelativeLocationPath,
        "Step": parse_Step,
        "StringFunctions": parse_StringFunctions,
        "UnaryExpr": parse_UnaryExpr,
        "UnionExpr": parse_UnionExpr,
        "VariableReference": parse_VariableReference,
        "XFormsCoreFunctions": parse_XFormsCoreFunctions,
        "XFormsFunctions": parse_XFormsFunctions,
        "XFormsFunctionsChangeContext": parse_XFormsFunctionsChangeContext,
        "XPath1CoreFunctions": parse_XPath1CoreFunctions,
        "start": parse_start,
        "xpath": parse_xpath
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_xpath();
        var result2 = result1 !== null
          ? (function(xpath) { return xpath; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_xpath() {
        var cacheKey = 'xpath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_LocationPath();
        var result2 = result1 !== null
          ? (function(lp) {
          		return lp; 
          	})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LocationPath() {
        var cacheKey = 'LocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_RelativeLocationPath();
        var result4 = result3 !== null
          ? (function(relativePath) {
          		var paths = [],
          			first = relativePath.shift();
          	
          		paths.push({
          			name: "path",
          			type: "relative",
          			step: first
          		});
          	
          		for (var i in relativePath) {
          			var v = relativePath[i];
          			paths.push({
          				name: "path",
          				type: v[0] == "/" ? "relative" : "absolute",
          				step: v[1]
          			});
          		}
          		return paths;
          	})(result3)
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbsoluteLocationPath();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbsoluteLocationPath() {
        var cacheKey = 'AbsoluteLocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "//") {
          var result10 = "//";
          pos += 2;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result10 !== null) {
          var result12 = parse_RelativeLocationPath();
          var result11 = result12 !== null ? result12 : '';
          if (result11 !== null) {
            var result8 = [result10, result11];
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(absolutePath) {
          		var paths = [],
          			first = absolutePath.shift();
          			
          		paths.push({
          			name: "path",
          			type: "absolute",
          			step: first
          		});
          			
          		for (var i in absolutePath) {
          			var v = absolutePath[i];
          			paths.push({
          				name: "path",
          				type: v[0] == "/" ? "relative" : "absolute",
          				step: v[1]
          			});
          		}
          		return paths;
          	})(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "/") {
            var result4 = "/";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result4 !== null) {
            var result6 = parse_RelativeLocationPath();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(relativePath) {
            		var paths = [],
            			first = relativePath.shift();
            		
            		paths.push({
            			name: "path",
            			type: "relative",
            			step: first
            		});
            		
            		for (var i in relativePath) {
            			var v = relativePath[i];
            			paths.push({
            				name: "path",
            				type: v[0] == "/" ? "relative" : "absolute",
            				step: v[1]
            			});
            		}
            		return paths;
            	})(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbreviatedStep() {
        var cacheKey = 'AbbreviatedStep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ".") {
          var result5 = ".";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        var result6 = result5 !== null
          ? (function() { return "self"; })()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 2) === "..") {
            var result2 = "..";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"..\"");
            }
          }
          var result3 = result2 !== null
            ? (function() { return "parent"; })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelativeLocationPath() {
        var cacheKey = 'RelativeLocationPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Step();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "/") {
            var result9 = "/";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 2) === "//") {
              var result8 = "//";
              pos += 2;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"//\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          }
          if (result6 !== null) {
            var result7 = parse_Step();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "/") {
              var result9 = "/";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 2) === "//") {
                var result8 = "//";
                pos += 2;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"//\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            }
            if (result6 !== null) {
              var result7 = parse_Step();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(firstNode, restNodes) {
          		restNodes.unshift(firstNode);
          		return restNodes;
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Step() {
        var cacheKey = 'Step@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_AxisSpecifier();
        if (result7 !== null) {
          var result8 = parse_NodeTest();
          if (result8 !== null) {
            var result9 = [];
            var result10 = parse_Predicate();
            while (result10 !== null) {
              result9.push(result10);
              var result10 = parse_Predicate();
            }
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(specifier, test, predicates) {
          		return {
          			name: "step",
          			specifier: specifier,
          			test: test,
          			predicates: predicates 
          		};
          	})(result5[0], result5[1], result5[2])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_AbbreviatedStep();
          var result3 = result2 !== null
            ? (function(abbrev) {
            		return {
            			name: "step",
            			specifier: {
            				name: "axisSpecifier",
            				type: abbrev
            			},
            			test: null,
            			predicates: []
            		}
            	})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AxisSpecifier() {
        var cacheKey = 'AxisSpecifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_AxisName();
        if (result5 !== null) {
          if (input.substr(pos, 2) === "::") {
            var result6 = "::";
            pos += 2;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"::\"");
            }
          }
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(axisName) {
          		return {
          			name: "axisSpecifier",
          			type: axisName
          		}
          	})(result3[0])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AbbreviatedAxisSpecifier();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AbbreviatedAxisSpecifier() {
        var cacheKey = 'AbbreviatedAxisSpecifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "@") {
          var result5 = "@";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        var result6 = result5 !== null
          ? (function() {
          		return {
          			name: "axisSpecifier",
          			type: "attribute"
          		}
          	})()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 0) === "") {
            var result2 = "";
            pos += 0;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
            		return {
            			name: "axisSpecifier",
            			type: "self"
            		}
            	})()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AxisName() {
        var cacheKey = 'AxisName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 8) === "ancestor") {
          var result13 = "ancestor";
          pos += 8;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"ancestor\"");
          }
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          if (input.substr(pos, 16) === "ancestor-or-self") {
            var result12 = "ancestor-or-self";
            pos += 16;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"ancestor-or-self\"");
            }
          }
          if (result12 !== null) {
            var result0 = result12;
          } else {
            if (input.substr(pos, 9) === "attribute") {
              var result11 = "attribute";
              pos += 9;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"attribute\"");
              }
            }
            if (result11 !== null) {
              var result0 = result11;
            } else {
              if (input.substr(pos, 5) === "child") {
                var result10 = "child";
                pos += 5;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"child\"");
                }
              }
              if (result10 !== null) {
                var result0 = result10;
              } else {
                if (input.substr(pos, 10) === "descendant") {
                  var result9 = "descendant";
                  pos += 10;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"descendant\"");
                  }
                }
                if (result9 !== null) {
                  var result0 = result9;
                } else {
                  if (input.substr(pos, 18) === "descendant-or-self") {
                    var result8 = "descendant-or-self";
                    pos += 18;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"descendant-or-self\"");
                    }
                  }
                  if (result8 !== null) {
                    var result0 = result8;
                  } else {
                    if (input.substr(pos, 9) === "following") {
                      var result7 = "following";
                      pos += 9;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"following\"");
                      }
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      if (input.substr(pos, 17) === "following-sibling") {
                        var result6 = "following-sibling";
                        pos += 17;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"following-sibling\"");
                        }
                      }
                      if (result6 !== null) {
                        var result0 = result6;
                      } else {
                        if (input.substr(pos, 9) === "namespace") {
                          var result5 = "namespace";
                          pos += 9;
                        } else {
                          var result5 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"namespace\"");
                          }
                        }
                        if (result5 !== null) {
                          var result0 = result5;
                        } else {
                          if (input.substr(pos, 6) === "parent") {
                            var result4 = "parent";
                            pos += 6;
                          } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"parent\"");
                            }
                          }
                          if (result4 !== null) {
                            var result0 = result4;
                          } else {
                            if (input.substr(pos, 9) === "preceding") {
                              var result3 = "preceding";
                              pos += 9;
                            } else {
                              var result3 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"preceding\"");
                              }
                            }
                            if (result3 !== null) {
                              var result0 = result3;
                            } else {
                              if (input.substr(pos, 17) === "preceding-sibling") {
                                var result2 = "preceding-sibling";
                                pos += 17;
                              } else {
                                var result2 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"preceding-sibling\"");
                                }
                              }
                              if (result2 !== null) {
                                var result0 = result2;
                              } else {
                                if (input.substr(pos, 4) === "self") {
                                  var result1 = "self";
                                  pos += 4;
                                } else {
                                  var result1 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"self\"");
                                  }
                                }
                                if (result1 !== null) {
                                  var result0 = result1;
                                } else {
                                  var result0 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeTest() {
        var cacheKey = 'NodeTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result11 = parse_NameTest();
        var result12 = result11 !== null
          ? (function(nameTest) {
          		return {
          			name: "nodeTest",
          			test: nameTest
          		}
          	})(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var result7 = parse_NodeType();
          if (result7 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result8 = "(";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result8 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result9 = ")";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result9 !== null) {
                var result6 = [result7, result8, result9];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 22) === "processing-instruction") {
              var result2 = "processing-instruction";
              pos += 22;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"processing-instruction\"");
              }
            }
            if (result2 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result3 = "(";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                var result4 = parse_Literal();
                if (result4 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result5 = ")";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result5 !== null) {
                    var result1 = [result2, result3, result4, result5];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeType() {
        var cacheKey = 'NodeType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "comment") {
          var result4 = "comment";
          pos += 7;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"comment\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 4) === "text") {
            var result3 = "text";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"text\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 22) === "processing-instruction") {
              var result2 = "processing-instruction";
              pos += 22;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"processing-instruction\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 4) === "node") {
                var result1 = "node";
                pos += 4;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"node\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Predicate() {
        var cacheKey = 'Predicate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "[") {
          var result10 = "[";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result10 !== null) {
          var result11 = parse_Name();
          if (result11 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result19 = "=";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result19 !== null) {
              var result12 = result19;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result18 = "!=";
                pos += 2;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result18 !== null) {
                var result12 = result18;
              } else {
                if (input.substr(pos, 1) === "<") {
                  var result17 = "<";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result17 !== null) {
                  var result12 = result17;
                } else {
                  if (input.substr(pos, 2) === "<=") {
                    var result16 = "<=";
                    pos += 2;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<=\"");
                    }
                  }
                  if (result16 !== null) {
                    var result12 = result16;
                  } else {
                    if (input.substr(pos, 1) === ">") {
                      var result15 = ">";
                      pos += 1;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result15 !== null) {
                      var result12 = result15;
                    } else {
                      var result12 = null;;
                    };
                  };
                };
              };
            }
            if (result12 !== null) {
              var result13 = parse_Name();
              if (result13 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result14 = "]";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result14 !== null) {
                  var result8 = [result10, result11, result12, result13, result14];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(path, op, compare) {
          		return {
          			name: "predicate",
          			path: path,
          			operator: op,
          			expr: compare
          		}
          	})(result8[1], result8[2], result8[3])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "[") {
            var result4 = "[";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_OrExpr();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result6 = "]";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(expr) {
            		return {
            			name: "predicate",
            			expr: expr
            		}
            	})(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpr() {
        var cacheKey = 'PrimaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result8 = parse_VariableReference();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result5 = "(";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse_OrExpr();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result7 = ")";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_Literal();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_Number();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_FunctionCall();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionCall() {
        var cacheKey = 'FunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_FunctionName();
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_OrExpr();
            if (result6 !== null) {
              var result7 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_OrExpr();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result7.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result9 = ",";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_OrExpr();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnionExpr() {
        var cacheKey = 'UnionExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PathExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "|") {
            var result4 = "|";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "|") {
              var result4 = "|";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathExpr() {
        var cacheKey = 'PathExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result10 = parse_LocationPath();
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var result9 = parse_FilterExpr();
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos1 = pos;
            var result6 = parse_FilterExpr();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result7 = "/";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_RelativeLocationPath();
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              var result2 = parse_FilterExpr();
              if (result2 !== null) {
                if (input.substr(pos, 2) === "//") {
                  var result3 = "//";
                  pos += 2;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"//\"");
                  }
                }
                if (result3 !== null) {
                  var result4 = parse_RelativeLocationPath();
                  if (result4 !== null) {
                    var result1 = [result2, result3, result4];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FilterExpr() {
        var cacheKey = 'FilterExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PrimaryExpr();
        if (result1 !== null) {
          var result2 = [];
          var result3 = parse_Predicate();
          while (result3 !== null) {
            result2.push(result3);
            var result3 = parse_Predicate();
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrExpr() {
        var cacheKey = 'OrExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_AndExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 2) === "or") {
            var result4 = "or";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"or\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_AndExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "or") {
              var result4 = "or";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"or\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_AndExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AndExpr() {
        var cacheKey = 'AndExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_EqualityExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "and") {
            var result4 = "and";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"and\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_EqualityExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 3) === "and") {
              var result4 = "and";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"and\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_EqualityExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EqualityExpr() {
        var cacheKey = 'EqualityExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_RelationalExpr();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "=") {
            var result9 = "=";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 2) === "!=") {
              var result8 = "!=";
              pos += 2;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"!=\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;;
            };
          }
          if (result6 !== null) {
            var result7 = parse_RelationalExpr();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "=") {
              var result9 = "=";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result8 = "!=";
                pos += 2;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;;
              };
            }
            if (result6 !== null) {
              var result7 = parse_RelationalExpr();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(relation1, relations) {
          		var relations = [];
          		return {
          			name: "relational",
          			relation: relation1
          		}
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpr() {
        var cacheKey = 'RelationalExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_AdditiveExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "<") {
            var result9 = "<";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"<\"");
            }
          }
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos, 1) === ">") {
              var result8 = ">";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos, 2) === "<=") {
                var result7 = "<=";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<=\"");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos, 2) === ">=") {
                  var result6 = ">=";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">=\"");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result4 = null;;
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_AdditiveExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "<") {
              var result9 = "<";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result9 !== null) {
              var result4 = result9;
            } else {
              if (input.substr(pos, 1) === ">") {
                var result8 = ">";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              if (result8 !== null) {
                var result4 = result8;
              } else {
                if (input.substr(pos, 2) === "<=") {
                  var result7 = "<=";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<=\"");
                  }
                }
                if (result7 !== null) {
                  var result4 = result7;
                } else {
                  if (input.substr(pos, 2) === ">=") {
                    var result6 = ">=";
                    pos += 2;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result6 !== null) {
                    var result4 = result6;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            }
            if (result4 !== null) {
              var result5 = parse_AdditiveExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpr() {
        var cacheKey = 'AdditiveExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_MultiplicativeExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "+") {
            var result7 = "+";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result7 !== null) {
            var result4 = result7;
          } else {
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = parse_MultiplicativeExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "+") {
              var result7 = "+";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result7 !== null) {
              var result4 = result7;
            } else {
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result5 = parse_MultiplicativeExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpr() {
        var cacheKey = 'MultiplicativeExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_UnaryExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var result8 = parse_MultiplyOperator();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            if (input.substr(pos, 3) === "div") {
              var result7 = "div";
              pos += 3;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"div\"");
              }
            }
            if (result7 !== null) {
              var result4 = result7;
            } else {
              if (input.substr(pos, 3) === "mod") {
                var result6 = "mod";
                pos += 3;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"mod\"");
                }
              }
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;;
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_UnaryExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var result8 = parse_MultiplyOperator();
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos, 3) === "div") {
                var result7 = "div";
                pos += 3;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"div\"");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos, 3) === "mod") {
                  var result6 = "mod";
                  pos += 3;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"mod\"");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result4 = null;;
                };
              };
            }
            if (result4 !== null) {
              var result5 = parse_UnaryExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpr() {
        var cacheKey = 'UnaryExpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_UnionExpr();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "-") {
            var result4 = "-";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_UnionExpr();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result4 = "-";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_UnionExpr();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprToken() {
        var cacheKey = 'ExprToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "(") {
          var result17 = "(";
          pos += 1;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          if (input.substr(pos, 1) === ")") {
            var result16 = ")";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\")\"");
            }
          }
          if (result16 !== null) {
            var result0 = result16;
          } else {
            if (input.substr(pos, 1) === "[") {
              var result15 = "[";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result15 !== null) {
              var result0 = result15;
            } else {
              if (input.substr(pos, 1) === "]") {
                var result14 = "]";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result14 !== null) {
                var result0 = result14;
              } else {
                if (input.substr(pos, 1) === ".") {
                  var result13 = ".";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result13 !== null) {
                  var result0 = result13;
                } else {
                  if (input.substr(pos, 2) === "..") {
                    var result12 = "..";
                    pos += 2;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"..\"");
                    }
                  }
                  if (result12 !== null) {
                    var result0 = result12;
                  } else {
                    if (input.substr(pos, 1) === "@") {
                      var result11 = "@";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"@\"");
                      }
                    }
                    if (result11 !== null) {
                      var result0 = result11;
                    } else {
                      if (input.substr(pos, 1) === ",") {
                        var result10 = ",";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result10 !== null) {
                        var result0 = result10;
                      } else {
                        if (input.substr(pos, 2) === "::") {
                          var result9 = "::";
                          pos += 2;
                        } else {
                          var result9 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"::\"");
                          }
                        }
                        if (result9 !== null) {
                          var result0 = result9;
                        } else {
                          var result8 = parse_NameTest();
                          if (result8 !== null) {
                            var result0 = result8;
                          } else {
                            var result7 = parse_NodeType();
                            if (result7 !== null) {
                              var result0 = result7;
                            } else {
                              var result6 = parse_Operator();
                              if (result6 !== null) {
                                var result0 = result6;
                              } else {
                                var result5 = parse_FunctionName();
                                if (result5 !== null) {
                                  var result0 = result5;
                                } else {
                                  var result4 = parse_AxisName();
                                  if (result4 !== null) {
                                    var result0 = result4;
                                  } else {
                                    var result3 = parse_Literal();
                                    if (result3 !== null) {
                                      var result0 = result3;
                                    } else {
                                      var result2 = parse_Number();
                                      if (result2 !== null) {
                                        var result0 = result2;
                                      } else {
                                        var result1 = parse_VariableReference();
                                        if (result1 !== null) {
                                          var result0 = result1;
                                        } else {
                                          var result0 = null;;
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = 'Literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result7 = "\"";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result7 !== null) {
          var result8 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result10 !== null) {
            result8.push(result10);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result8 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result9 = "\"";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result9 !== null) {
              var result6 = [result7, result8, result9];
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "'") {
            var result2 = "'";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result2 !== null) {
            var result3 = [];
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            while (result5 !== null) {
              result3.push(result5);
              if (input.substr(pos).match(/^[^']/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[^']");
                }
              }
            }
            if (result3 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result4 = "'";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result5 = parse_Digits();
        if (result5 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            var result10 = parse_Digits();
            var result9 = result10 !== null ? result10 : '';
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          var result6 = result7 !== null ? result7 : '';
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ".") {
            var result2 = ".";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_Digits();
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Digits() {
        var cacheKey = 'Digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Operator() {
        var cacheKey = 'Operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result12 = parse_OperatorName();
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var result11 = parse_MultiplyOperator();
          if (result11 !== null) {
            var result0 = result11;
          } else {
            if (input.substr(pos, 1) === "/") {
              var result10 = "/";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              if (input.substr(pos, 2) === "//") {
                var result9 = "//";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"//\"");
                }
              }
              if (result9 !== null) {
                var result0 = result9;
              } else {
                if (input.substr(pos, 1) === "|") {
                  var result8 = "|";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"|\"");
                  }
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  if (input.substr(pos, 1) === "+") {
                    var result7 = "+";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    if (input.substr(pos, 1) === "-") {
                      var result6 = "-";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      if (input.substr(pos, 1) === "=") {
                        var result5 = "=";
                        pos += 1;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"=\"");
                        }
                      }
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        if (input.substr(pos, 2) === "!=") {
                          var result4 = "!=";
                          pos += 2;
                        } else {
                          var result4 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"!=\"");
                          }
                        }
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          if (input.substr(pos, 1) === "<") {
                            var result3 = "<";
                            pos += 1;
                          } else {
                            var result3 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"<\"");
                            }
                          }
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            if (input.substr(pos, 2) === "<=") {
                              var result2 = "<=";
                              pos += 2;
                            } else {
                              var result2 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"<=\"");
                              }
                            }
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              if (input.substr(pos, 1) === ">") {
                                var result1 = ">";
                                pos += 1;
                              } else {
                                var result1 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\">\"");
                                }
                              }
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OperatorName() {
        var cacheKey = 'OperatorName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "and") {
          var result4 = "and";
          pos += 3;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"and\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 2) === "or") {
            var result3 = "or";
            pos += 2;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"or\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 3) === "mod") {
              var result2 = "mod";
              pos += 3;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"mod\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 3) === "div") {
                var result1 = "div";
                pos += 3;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"div\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplyOperator() {
        var cacheKey = 'MultiplyOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "*") {
          var result0 = "*";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionName() {
        var cacheKey = 'FunctionName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_XPath1CoreFunctions();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_XFormsCoreFunctions();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_XPath1CoreFunctions();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VariableReference() {
        var cacheKey = 'VariableReference@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "$") {
          var result1 = "$";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_Name();
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameTest() {
        var cacheKey = 'NameTest@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "*") {
          var result2 = "*";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Name();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprWhitespace() {
        var cacheKey = 'ExprWhitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	 \xA0\uFEFF]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF]");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameStartChar() {
        var cacheKey = 'NameStartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ":") {
          var result4 = ":";
          pos += 1;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\":\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos).match(/^[A-Z]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[A-Z]");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "_") {
              var result2 = "_";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos).match(/^[a-z]/) !== null) {
                var result1 = input.charAt(pos);
                pos++;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-z]");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameChar() {
        var cacheKey = 'NameChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_NameStartChar();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result3 = "-";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result2 = ".";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result1 = input.charAt(pos);
                pos++;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Name() {
        var cacheKey = 'Name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NameStartChar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_NameChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_NameChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(nameStart, nameEnd) {
          		return nameStart + nameEnd.join("");
          	})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_XPath1CoreFunctions() {
        var cacheKey = 'XPath1CoreFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_NodeSetFunctions();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_StringFunctions();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_BooleanFunctions();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_NumberFunctions();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NodeSetFunctions() {
        var cacheKey = 'NodeSetFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "last") {
          var result7 = "last";
          pos += 4;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"last\"");
          }
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 8) === "position") {
            var result6 = "position";
            pos += 8;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"position\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 5) === "count") {
              var result5 = "count";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"count\"");
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              if (input.substr(pos, 2) === "id") {
                var result4 = "id";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"id\"");
                }
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                if (input.substr(pos, 10) === "local-name") {
                  var result3 = "local-name";
                  pos += 10;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"local-name\"");
                  }
                }
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos, 13) === "namespace-uri") {
                    var result2 = "namespace-uri";
                    pos += 13;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"namespace-uri\"");
                    }
                  }
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    if (input.substr(pos, 4) === "name") {
                      var result1 = "name";
                      pos += 4;
                    } else {
                      var result1 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"name\"");
                      }
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StringFunctions() {
        var cacheKey = 'StringFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "string") {
          var result10 = "string";
          pos += 6;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"string\"");
          }
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          if (input.substr(pos, 6) === "concat") {
            var result9 = "concat";
            pos += 6;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"concat\"");
            }
          }
          if (result9 !== null) {
            var result0 = result9;
          } else {
            if (input.substr(pos, 11) === "starts-with") {
              var result8 = "starts-with";
              pos += 11;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"starts-with\"");
              }
            }
            if (result8 !== null) {
              var result0 = result8;
            } else {
              if (input.substr(pos, 8) === "contains") {
                var result7 = "contains";
                pos += 8;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"contains\"");
                }
              }
              if (result7 !== null) {
                var result0 = result7;
              } else {
                if (input.substr(pos, 16) === "substring-before") {
                  var result6 = "substring-before";
                  pos += 16;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"substring-before\"");
                  }
                }
                if (result6 !== null) {
                  var result0 = result6;
                } else {
                  if (input.substr(pos, 15) === "substring-after") {
                    var result5 = "substring-after";
                    pos += 15;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"substring-after\"");
                    }
                  }
                  if (result5 !== null) {
                    var result0 = result5;
                  } else {
                    if (input.substr(pos, 9) === "substring") {
                      var result4 = "substring";
                      pos += 9;
                    } else {
                      var result4 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"substring\"");
                      }
                    }
                    if (result4 !== null) {
                      var result0 = result4;
                    } else {
                      if (input.substr(pos, 13) === "string-length") {
                        var result3 = "string-length";
                        pos += 13;
                      } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"string-length\"");
                        }
                      }
                      if (result3 !== null) {
                        var result0 = result3;
                      } else {
                        if (input.substr(pos, 15) === "normalize-space") {
                          var result2 = "normalize-space";
                          pos += 15;
                        } else {
                          var result2 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"normalize-space\"");
                          }
                        }
                        if (result2 !== null) {
                          var result0 = result2;
                        } else {
                          if (input.substr(pos, 9) === "translate") {
                            var result1 = "translate";
                            pos += 9;
                          } else {
                            var result1 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"translate\"");
                            }
                          }
                          if (result1 !== null) {
                            var result0 = result1;
                          } else {
                            var result0 = null;;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanFunctions() {
        var cacheKey = 'BooleanFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 7) === "boolean") {
          var result5 = "boolean";
          pos += 7;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"boolean\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 3) === "not") {
            var result4 = "not";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"not\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 4) === "true") {
              var result3 = "true";
              pos += 4;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"true\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 5) === "false") {
                var result2 = "false";
                pos += 5;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"false\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 4) === "lang") {
                  var result1 = "lang";
                  pos += 4;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"lang\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumberFunctions() {
        var cacheKey = 'NumberFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "number") {
          var result5 = "number";
          pos += 6;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"number\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 3) === "sum") {
            var result4 = "sum";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"sum\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 5) === "floor") {
              var result3 = "floor";
              pos += 5;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"floor\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 7) === "ceiling") {
                var result2 = "ceiling";
                pos += 7;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ceiling\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 5) === "round") {
                  var result1 = "round";
                  pos += 5;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"round\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_XFormsCoreFunctions() {
        var cacheKey = 'XFormsCoreFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_XFormsFunctionsChangeContext();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_XFormsFunctions();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_XFormsFunctionsChangeContext() {
        var cacheKey = 'XFormsFunctionsChangeContext@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 8) === "instance") {
          var result0 = "instance";
          pos += 8;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"instance\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_XFormsFunctions() {
        var cacheKey = 'XFormsFunctions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "avg") {
          var result13 = "avg";
          pos += 3;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"avg\"");
          }
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          if (input.substr(pos, 19) === "boolean-from-string") {
            var result12 = "boolean-from-string";
            pos += 19;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"boolean-from-string\"");
            }
          }
          if (result12 !== null) {
            var result0 = result12;
          } else {
            if (input.substr(pos, 15) === "count-non-empty") {
              var result11 = "count-non-empty";
              pos += 15;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"count-non-empty\"");
              }
            }
            if (result11 !== null) {
              var result0 = result11;
            } else {
              if (input.substr(pos, 14) === "days-from-date") {
                var result10 = "days-from-date";
                pos += 14;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"days-from-date\"");
                }
              }
              if (result10 !== null) {
                var result0 = result10;
              } else {
                if (input.substr(pos, 2) === "if") {
                  var result9 = "if";
                  pos += 2;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"if\"");
                  }
                }
                if (result9 !== null) {
                  var result0 = result9;
                } else {
                  if (input.substr(pos, 5) === "index") {
                    var result8 = "index";
                    pos += 5;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"index\"");
                    }
                  }
                  if (result8 !== null) {
                    var result0 = result8;
                  } else {
                    if (input.substr(pos, 3) === "max") {
                      var result7 = "max";
                      pos += 3;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"max\"");
                      }
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      if (input.substr(pos, 3) === "min") {
                        var result6 = "min";
                        pos += 3;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"min\"");
                        }
                      }
                      if (result6 !== null) {
                        var result0 = result6;
                      } else {
                        if (input.substr(pos, 6) === "months") {
                          var result5 = "months";
                          pos += 6;
                        } else {
                          var result5 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"months\"");
                          }
                        }
                        if (result5 !== null) {
                          var result0 = result5;
                        } else {
                          if (input.substr(pos, 3) === "now") {
                            var result4 = "now";
                            pos += 3;
                          } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"now\"");
                            }
                          }
                          if (result4 !== null) {
                            var result0 = result4;
                          } else {
                            if (input.substr(pos, 8) === "property") {
                              var result3 = "property";
                              pos += 8;
                            } else {
                              var result3 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"property\"");
                              }
                            }
                            if (result3 !== null) {
                              var result0 = result3;
                            } else {
                              if (input.substr(pos, 7) === "seconds") {
                                var result2 = "seconds";
                                pos += 7;
                              } else {
                                var result2 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"seconds\"");
                                }
                              }
                              if (result2 !== null) {
                                var result0 = result2;
                              } else {
                                if (input.substr(pos, 21) === "seconds-from-dateTime") {
                                  var result1 = "seconds-from-dateTime";
                                  pos += 21;
                                } else {
                                  var result1 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"seconds-from-dateTime\"");
                                  }
                                }
                                if (result1 !== null) {
                                  var result0 = result1;
                                } else {
                                  var result0 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
